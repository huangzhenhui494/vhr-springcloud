    1.复杂分布式体系结构的应用程序有数十个依赖关系,每个依赖关系在某些时候将不可避免地失败。
    2.A->B-C...(扇出),如果扇出的链路上某个微服务调用响应过长或不可调用,对微服务A的调用会占用
越来越多的资源,进而引起系统崩溃即"雪崩效应"。
    3.熔断:抛出异常,并使用@HystrixCommand。当某个异常触发，直接熔断整个服务
    4.有了熔断为什么还有降级：
        4.1 AOP：主业务与异常处理（熔断处理）的解耦
        4.2 方法的膨胀（统一放在一个接口处理，针对某一个微服务）

    服务降级：整体资源不够，忍痛将某些服务先关掉，待度过难关，再开启回来。
    为了保证某个服务正常运行（访问量过多）,此时将另一个服务暂停,将资源给某个服务器,
    此时为了避免访问已关闭的服务等待并造成错误,返回服务关闭的信息。
    服务降级处理是在客户端完成的，跟服务端没有关系。
    总结：能访问则访问，不能访问返回fallback的信息。此时客户端的访问才不会过多。
